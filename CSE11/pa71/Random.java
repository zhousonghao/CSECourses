/* 
 * Name: Songhao Zhou 
 * Login: cs11wJC
 * Date: 2/27/2014
 * File: Random.java 
 * Responsible for construction of the random and has the reactTo method which
 * implement the move when it is called
 */ 

import objectdraw.*;
import java.awt.*;
import java.lang.Math;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.*;



/* 
 * Name: Runner
 * Purpose:  Responsible for construction of the random and has the reactTo 
 * method which implement the move randomly when it is called. 
 */

public class Random extends Critter implements ActionListener
{
  //declare random as one vertical line and one horizontal line
  private Line random_vertical;
  private Line random_horizontal;
  private static final double WIDTH = 15;
  private static final double HEIGHT = 15;

  //set the boundry for random generator 2  
  private static final double RAN_BEGIN = -10;
  private static final double RAN_END = 10;

  private static final int TWO = 2;  

  //set the boundry for random generator 2
  private static final double RAN_OUTBOUND_BEGIN = 100;
  private static final double RAN_OUTBOUND_END = 400;

  //set the boundry for random generator 1    
  private RandomDoubleGenerator randDouble_x;
  private RandomDoubleGenerator randDouble_y;

  //set the boundry for random generator 2  
  private RandomDoubleGenerator randDouble_outbound_x;
  private RandomDoubleGenerator randDouble_outbound_y;

  //set the booleans
  private boolean cleared;
  private boolean stop_button_clicked;

  private DrawingCanvas canvas;

  //decalre line location variable
  private Location line_location;



  /* 
  * Name: Random
  * Purpose:  Responsible for construction of the random and has the reactTo 
  * method which implement the move when it is called. 
  */

  public Random(Location loc, DrawingCanvas canvas) 
  {
    //save its center loc and canvas to its parent critter
    super(loc ,canvas);

    //save the canvas
    this.canvas = canvas;

    //create the line location
    line_location = new Location(loc.getX()-WIDTH/TWO, loc.getY()-HEIGHT/TWO);

    //create two lines
    random_vertical = new Line(loc.getX(),loc.getY()-WIDTH/TWO,loc.getX(),
                               loc.getY()+HEIGHT/TWO, canvas);

    random_horizontal = new Line(loc.getX()-WIDTH/TWO,loc.getY(),
                                 loc.getX()+WIDTH/TWO,loc.getY(), canvas);

    //two original random generator
    randDouble_x = new RandomDoubleGenerator(RAN_BEGIN, 
    RAN_END);

    randDouble_y = new RandomDoubleGenerator(RAN_BEGIN, 
    RAN_END);

    //two additinoal random generator for out bound
    randDouble_outbound_x = new RandomDoubleGenerator(RAN_OUTBOUND_BEGIN, 
    RAN_OUTBOUND_END);

    randDouble_outbound_y = new RandomDoubleGenerator(RAN_OUTBOUND_BEGIN, 
    RAN_OUTBOUND_END);

    //set both lines to orange
    random_vertical.setColor(Color.orange);
    random_horizontal.setColor(Color.orange);
  }



  /* 
  * Name: reactTo
  * Purpose: This method taks charge of movement that current critter needs to
  * take and then move to that corresponding direction. When the critter goes
  * off the canvas, it will be moved to a position which is generated by random
  * generator
  * Parameters: Critter other, we need this method to determine the action
  * based on which typr is other critter
  * Return: void
  */

  public void reactTo(Critter other) 
  {
    //check the null case
    if(other == null)
      return;

    //if statement to check if the critter is within the bound
    synchronized(this)
    {
      if( this.getLoc().getX()+WIDTH/TWO <= canvas.getWidth() &&  
          this.getLoc().getX()-WIDTH/TWO >= 0 && 
          this.getLoc().getY()+HEIGHT/TWO <= canvas.getHeight() && 
          this.getLoc().getY()-HEIGHT/TWO >= 0 )
      {
        //get the next value from random double generator 1
        double x = randDouble_x.nextValue();
        double y = randDouble_y.nextValue();

        //move the amount which is given by the random generator
        random_vertical.move( x,  y);
        random_horizontal.move( x, y);
 
        //set a new origin location   
        Location this_new_loc = new Location (this.getLoc().getX() + x, 
                                              this.getLoc().getY() + y);
        //update the new origin location
        this.setLoc(this_new_loc);
      }
   
      //in the case where the critter goes off the bound
      else
      {
        //get the next value from random double generator 2
        double x = randDouble_outbound_x.nextValue();
        double y = randDouble_outbound_y.nextValue();

        //move to the locationwhich is given by the random generator
        this.random_vertical.moveTo( x+WIDTH/TWO,y);
        this.random_horizontal.moveTo( x, y+HEIGHT/TWO);

        //set a new origin location   
        Location this_new_loc2 = new Location (x+WIDTH/TWO, y+HEIGHT/TWO);

        //update the new origin location
        this.setLoc(this_new_loc2);
      }
    }

  }//end of reactTo



  
  /* 
  * Name: actionPerformed 
  * Purpose: Once the clear button is clicked the remove the critter from 
  * canvas
  * Parameters: ActionEvent evt. we need this parameter in order to
  * determine which button has been clicked
  * Return: void 
  */
  public void actionPerformed( ActionEvent evt ) 
  {
    if(evt.getActionCommand() .equals( "Clear") && cleared == false)
    {
      random_vertical.removeFromCanvas();
      random_horizontal.removeFromCanvas();

      cleared = true;
    }

  }//end of actionperformed

}//end of class
